// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Owner's periodontal charts
    match /users/{uid}/perioPatients/{hn} {
      // Owner full access
      allow read, write: if request.auth != null && request.auth.uid == uid;

      // Also allow READ if a viewer grant exists
      allow read: if request.auth != null &&
                  exists(/databases/$(database)/documents/users/$(uid)/perioPatients/$(hn)/viewers/$(request.auth.uid));
    }

    // Viewer grants (one doc per viewer)
    match /users/{uid}/perioPatients/{hn}/viewers/{viewerUid} {
      // Owner can manage grants
      allow read, write, delete: if request.auth != null && request.auth.uid == uid;

      // Viewer may read their own grant (optional convenience)
      allow read: if request.auth != null && request.auth.uid == viewerUid;

      // Viewer CREATE: prove knowledge of code+password hash.
      // IMPORTANT: we only read a fixed doc path using {uid, hn} (available from match).
      allow create: if request.auth != null
                    && request.auth.uid == viewerUid
                    && request.resource.data.shareCode is string
                    && request.resource.data.pwHash is string
                    // secret doc must exist
                    && exists(/databases/$(database)/documents/users/$(uid)/perioPatients/$(hn)/shareSecret/current)
                    // validate against secret (no dynamic path; fixed ID 'current')
                    && get(/databases/$(database)/documents/users/$(uid)/perioPatients/$(hn)/shareSecret/current).data.active == true
                    && request.time < get(/databases/$(database)/documents/users/$(uid)/perioPatients/$(hn)/shareSecret/current).data.expiresAt
                    && request.resource.data.shareCode == get(/databases/$(database)/documents/users/$(uid)/perioPatients/$(hn)/shareSecret/current).data.code
                    && request.resource.data.pwHash == get(/databases/$(database)/documents/users/$(uid)/perioPatients/$(hn)/shareSecret/current).data.pwHash;
    }

    // Secret share metadata under the *patient* path (owner-only).
    // Holds: { code, pwHash, expiresAt, active, perms }
    match /users/{uid}/perioPatients/{hn}/shareSecret/{id} {
      allow read, write, delete: if request.auth != null && request.auth.uid == uid;
    }

    // Public salts indexed by 6-char code (so viewers can derive pwHash in the browser)
    // Holds: { ownerUid, hn, salt, active, expiresAt }
    match /publicSalts/{code} {
      // Public read while active & not expired
      allow read: if exists(/databases/$(database)/documents/publicSalts/$(code))
                  && get(/databases/$(database)/documents/publicSalts/$(code)).data.active == true
                  && request.time < get(/databases/$(database)/documents/publicSalts/$(code)).data.expiresAt;

      // Only the owner may create/update/delete their own salt doc
      allow create, update, delete: if request.auth != null
        && request.resource.data.ownerUid == request.auth.uid;
    }
  }
}
